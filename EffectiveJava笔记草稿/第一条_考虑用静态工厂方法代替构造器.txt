描述: 静态工厂方法, 这里并不是指设计模式中的工厂方法. 而是通过公有的静态工厂方法来获取类的实例.

静态工厂方法与构造器的比较

优势
1. 它们拥有独立的名称.

	. 更易于理解, 尤其是在构造器的参数并不能确切的表述返回的类时.
	. 当需要多个相同签名的构造器方法时可以使用工厂方法, 慎重命名以示区别.

	PS: 
		.方法签名: 从左至右包括方法名、参数类型和个数
		.可用通过调整参数的顺序来实现相同签名的构造器, 但是这样的代码不利于了解阅读

2. 不必在每次调用它们的时候创建新的对象

	.避免创建不必要的重复对象, 不可变类可以使用预先构建好的实例(15条), 也可在重复创建相同的对象成本高昂时使用
	.可用于实例受控的类

	PS：为什么要创建实例受控的类

3. 可以返回原返回类的任何子类型的对象 
	
	.选择返回对象的类时有了更大的灵活性
		一种应用方式是.API可以返回对象, 同时又不会使类变成公有的. 这种隐藏方式会使API变得更加简洁.
		适用于基于接口的框架  这种框架接口为工厂方法提供了自然的返回类型Type 接口不能有静态方法 所以按照惯例
		会有一个Type的静态工厂类types 的不可实例化的类
		↑ 应用举例 Java Collection Framework 的集合接口有32个便利的实现 这些实例几乎都可以在一个不可实例化的 静态工厂方法类 Collections中导出
		 例子分析 1. api的减少 2. 1的基础上意味着概念的减少 因为是由相关类精确指定 几乎可以不用阅读文档 3. 这样甚至要求用接口引用返回的实例 一个良好的习惯

	.提升可维护性和性能
		返回的类可以是 非公有
		可以随着每次调用改变返回实例 也取决于调用的参数
		允许返回任何返回类型的子类型
		可以随着版本 可以增删返回的实例 可以随着发行版本改变返回实例

	例子 java.util.EnumSet 
		 没有公有构造器 只有静态工厂方法
		 返回两种实 取决于底层枚举类型的大小 来采用不同的实现用以提升效率
		 实现类对于客户端来说都是不可见的 可以对实现类进行增删 
		 客户端只需要知道是EnumSet的某个子类即可

	.静态工厂方法返回的对象所属的类, 在编写包含该静态工厂方法的类时可以不必存在
		这种灵活性构成了 服务提供者框架(Service Provider Framework)的基础.
		例如 JDBC

		服务提供者框架. 

4. 在创建参数化类实例的时候, 他们可以使代码变得更加简洁.
	随着类型参数越来越长，越来越复杂，这一冗长的说明也很快变的痛苦起来。
	有了静态工厂方法，编译器就可以替你找到类型参数。这被称作类型推导（type inference）。例如，假设HashMap提供了这个静态工厂：

	public static <K,V> HashMap<K,V> newInstance(){
	    return new HashMap<K,V>();
	}
	你就可以简洁的代码替换上面繁琐的说明:

	1
	Map<String,List<String>> m = HashMap.newInstance();
	可以把这些方法放在自己的工具类中。更重要的是，可以把这样的静态工厂放在你自己的参数化的类中。
	现在的JVMS(Java1.7)已经实现了类型推导

缺点
	1.  类如果不含公有的或者受保护的构造器，就不能被子类化。

		对于公有的静态工厂所返回的非公有类，也同样如此。如，你想讲Collections Framework中的任何方便的实现类子类化，是不可能的。
		但是这样有时候也有好处，即它鼓励程序员使用复合（compostion），而不是继承。

	2. 它们与其他的静态方法实际上没有任何区别
		在API文档中，他们没有像构造器那样在API文档中明确标识出来，因此对于提供了静态工厂方法而不是构造器的类来说，要想查明如何实例化一个类，这是非常困难的。javadoc工具总有一天会注意到静态工厂方法。同时，你通过在类或者接口注释中关注静态工厂，并遵守标准的命名习惯，也可以弥补这一劣势。

下面是静态工厂的一些惯用名称:

valueOf，不太严格讲，该方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法。
of，valueOf的一种更为简洁的替代，在EnumSet中使用并流行起来。
getInstance，返回的实例是通过方法的参数来描述的。但是不能够说与参数具有同样的值。对于单例Singleton来说，该方法没有参数，并返回唯一的实例。
newInstance，向getInstance一样，但newInstance能够确保返回的每个实例都与所有其他实例不同。
getType，就像getInstance一样，但是在工厂方法处于不同的类的时候使用(子类)。Type表示工厂方法所返回的对象类型。
newType，就像newInstance一样，但是在工厂方法处于不同的类的时候使用(子类)。Type表示工厂方法所返回的对象类型。
不能很好的扩展到大量的可选参数

当参数非常多的时候静态方法的可读性,维护性等就非常差了,这个后面会说
	
http://ask.csdn.net/questions/261205 
http://liwenshui322.iteye.com/blog/1267202
